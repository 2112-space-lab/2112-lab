// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

// Represents the status of a single dependency like Redis or RabbitMQ.
type DependencyStatus struct {
	Name    string           `json:"name"`
	Status  HealthStatusEnum `json:"status"`
	Message *string          `json:"message,omitempty"`
}

type EventRoot struct {
	EventTimeUtc string  `json:"eventTimeUtc"`
	EventUID     string  `json:"eventUid"`
	EventType    string  `json:"eventType"`
	Comment      *string `json:"comment,omitempty"`
	Payload      string  `json:"payload"`
}

// Represents the overall health of the service.
type HealthStatus struct {
	ServiceName  string              `json:"serviceName"`
	Status       HealthStatusEnum    `json:"status"`
	Dependencies []*DependencyStatus `json:"dependencies"`
	TraceID      *string             `json:"traceId,omitempty"`
	Timestamp    string              `json:"timestamp"`
}

type Mutation struct {
}

type PropagationRequestInput struct {
	NoradID         string `json:"noradId"`
	TleLine1        string `json:"tleLine1"`
	TleLine2        string `json:"tleLine2"`
	StartTime       string `json:"startTime"`
	DurationMinutes *int32 `json:"durationMinutes,omitempty"`
	IntervalSeconds *int32 `json:"intervalSeconds,omitempty"`
}

type Query struct {
}

type SatellitePosition struct {
	ID        string  `json:"id"`
	Name      string  `json:"name"`
	Latitude  float64 `json:"latitude"`
	Longitude float64 `json:"longitude"`
	Altitude  float64 `json:"altitude"`
	Timestamp string  `json:"timestamp"`
	UID       string  `json:"uid"`
}

type SatelliteTle struct {
	ID       string `json:"id"`
	Name     string `json:"name"`
	TleLine1 string `json:"tleLine1"`
	TleLine2 string `json:"tleLine2"`
	UID      string `json:"uid"`
}

type SatelliteTlePropagated struct {
	NoradID      string `json:"noradId"`
	TleLine1     string `json:"tleLine1"`
	TleLine2     string `json:"tleLine2"`
	TimeInterval int32  `json:"timeInterval"`
	StoreKey     string `json:"store_key"`
}

type SatelliteVisibility struct {
	SatelliteID   string        `json:"satelliteId"`
	SatelliteName string        `json:"satelliteName"`
	Aos           string        `json:"aos"`
	Los           string        `json:"los"`
	UserLocation  *UserLocation `json:"userLocation"`
	UID           string        `json:"uid"`
}

type Subscription struct {
}

type UserLocation struct {
	UID       string  `json:"uid"`
	Latitude  float64 `json:"latitude"`
	Longitude float64 `json:"longitude"`
	Radius    float64 `json:"radius"`
	Horizon   float64 `json:"horizon"`
}

type UserLocationInput struct {
	UID       string  `json:"uid"`
	Latitude  float64 `json:"latitude"`
	Longitude float64 `json:"longitude"`
	Radius    float64 `json:"radius"`
	Horizon   float64 `json:"horizon"`
}

type EventType string

const (
	EventTypeSatelliteTlePropagated           EventType = "SATELLITE_TLE_PROPAGATED"
	EventTypeSatellitePositionUpdated         EventType = "SATELLITE_POSITION_UPDATED"
	EventTypeSatelliteVisibilityChecked       EventType = "SATELLITE_VISIBILITY_CHECKED"
	EventTypeSatelliteOrbitPredicted          EventType = "SATELLITE_ORBIT_PREDICTED"
	EventTypeSystemHealthChecked              EventType = "SYSTEM_HEALTH_CHECKED"
	EventTypeDataStoredInRedis                EventType = "DATA_STORED_IN_REDIS"
	EventTypeMessagePublishedToRabbitmq       EventType = "MESSAGE_PUBLISHED_TO_RABBITMQ"
	EventTypeSatelliteTlePropagationRequested EventType = "SATELLITE_TLE_PROPAGATION_REQUESTED"
)

var AllEventType = []EventType{
	EventTypeSatelliteTlePropagated,
	EventTypeSatellitePositionUpdated,
	EventTypeSatelliteVisibilityChecked,
	EventTypeSatelliteOrbitPredicted,
	EventTypeSystemHealthChecked,
	EventTypeDataStoredInRedis,
	EventTypeMessagePublishedToRabbitmq,
	EventTypeSatelliteTlePropagationRequested,
}

func (e EventType) IsValid() bool {
	switch e {
	case EventTypeSatelliteTlePropagated, EventTypeSatellitePositionUpdated, EventTypeSatelliteVisibilityChecked, EventTypeSatelliteOrbitPredicted, EventTypeSystemHealthChecked, EventTypeDataStoredInRedis, EventTypeMessagePublishedToRabbitmq, EventTypeSatelliteTlePropagationRequested:
		return true
	}
	return false
}

func (e EventType) String() string {
	return string(e)
}

func (e *EventType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventType", str)
	}
	return nil
}

func (e EventType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type HealthStatusEnum string

const (
	HealthStatusEnumHealthy     HealthStatusEnum = "HEALTHY"
	HealthStatusEnumDegraded    HealthStatusEnum = "DEGRADED"
	HealthStatusEnumUnavailable HealthStatusEnum = "UNAVAILABLE"
	HealthStatusEnumConnected   HealthStatusEnum = "CONNECTED"
)

var AllHealthStatusEnum = []HealthStatusEnum{
	HealthStatusEnumHealthy,
	HealthStatusEnumDegraded,
	HealthStatusEnumUnavailable,
	HealthStatusEnumConnected,
}

func (e HealthStatusEnum) IsValid() bool {
	switch e {
	case HealthStatusEnumHealthy, HealthStatusEnumDegraded, HealthStatusEnumUnavailable, HealthStatusEnumConnected:
		return true
	}
	return false
}

func (e HealthStatusEnum) String() string {
	return string(e)
}

func (e *HealthStatusEnum) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = HealthStatusEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid HealthStatusEnum", str)
	}
	return nil
}

func (e HealthStatusEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

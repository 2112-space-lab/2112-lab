// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package models

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for EServiceHealthStatus.
const (
	Reachable   EServiceHealthStatus = "Reachable"
	Unreachable EServiceHealthStatus = "Unreachable"
)

// CommonError defines model for CommonError.
type CommonError struct {
	Message string `json:"message"`
}

// EServiceHealthStatus defines model for EServiceHealthStatus.
type EServiceHealthStatus string

// RFC3339Date defines model for RFC3339Date.
type RFC3339Date = time.Time

// ServiceHealth defines model for ServiceHealth.
type ServiceHealth struct {
	ServiceName    *string               `json:"serviceName,omitempty"`
	ServiceStatus  *EServiceHealthStatus `json:"serviceStatus,omitempty"`
	UptimeSinceUtc *RFC3339Date          `json:"uptimeSinceUtc,omitempty"`
}

// UUID Unique identifier of type UUIDv4
type UUID = openapi_types.UUID

// UUIDv7 Unique identifier of type UUIDv7
type UUIDv7 = openapi_types.UUID

// VersionInfo defines model for VersionInfo.
type VersionInfo struct {
	BuildNumber string `json:"buildNumber"`
	Version     string `json:"version"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/5RSTWvcMBD9K2bao7q7dAOhvpUkpTk0h13cS+lBK42zU6yPjEYLJfi/FznrOMGGNDeJ",
	"ee/pvTd6BBNcDB69JKgfIZkjOj0cr4Jzwd8wBy7XyCEiC+EwdJiSvsdylL8RoYYkTP4e+l4B40MmRgv1",
	"r2fgbzUCw+EPGoFewc0e+UQGv6Pu5LgXLXkQR59d4e5Qm6M+dAgKGs/Pt0lrfFTB7tvVdrv9cq1lMNUG",
	"dlqgBqsFPwm5ojEjvXp/HjI9je+0Wwqqxvlk/CNjCzV8WE+lrs+NrhfD9gpyLO725A02Yt5SeRmzVD3r",
	"tGlur4uIxWSYolDwUEPj6SFjRRa9UEvIVWirwq0K/nQBamosZ7JLZQ3Iy3drX/6P9k/kRMHf+jbM13DI",
	"1Nm77A7Ii2s4PZHf/osjUL2SnP/MwqOzFSHpyuxrjNUOtUWuzousfgSLXYIXBmCzulhtiqcQ0etIUMN2",
	"tVl9BgVRy7HE6ft/AQAA//9giocodAMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

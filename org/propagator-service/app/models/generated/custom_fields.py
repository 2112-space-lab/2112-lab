# Generated by ariadne-codegen

from typing import Any, Dict, Optional, Union

from .base_operation import GraphQLField
from .custom_typing_fields import (
    DependencyStatusGraphQLField,
    HealthStatusGraphQLField,
    SatellitePositionGraphQLField,
    SatelliteTleGraphQLField,
    SatelliteVisibilityGraphQLField,
    UserLocationGraphQLField,
)


class DependencyStatusFields(GraphQLField):
    name: "DependencyStatusGraphQLField" = DependencyStatusGraphQLField("name")
    status: "DependencyStatusGraphQLField" = DependencyStatusGraphQLField("status")
    message: "DependencyStatusGraphQLField" = DependencyStatusGraphQLField("message")

    def fields(
        self, *subfields: DependencyStatusGraphQLField
    ) -> "DependencyStatusFields":
        """Subfields should come from the DependencyStatusFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DependencyStatusFields":
        self._alias = alias
        return self


class HealthStatusFields(GraphQLField):
    service_name: "HealthStatusGraphQLField" = HealthStatusGraphQLField("serviceName")
    status: "HealthStatusGraphQLField" = HealthStatusGraphQLField("status")

    @classmethod
    def dependencies(cls) -> "DependencyStatusFields":
        return DependencyStatusFields("dependencies")

    trace_id: "HealthStatusGraphQLField" = HealthStatusGraphQLField("traceId")
    timestamp: "HealthStatusGraphQLField" = HealthStatusGraphQLField("timestamp")

    def fields(
        self, *subfields: Union[HealthStatusGraphQLField, "DependencyStatusFields"]
    ) -> "HealthStatusFields":
        """Subfields should come from the HealthStatusFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "HealthStatusFields":
        self._alias = alias
        return self


class SatellitePositionFields(GraphQLField):
    id: "SatellitePositionGraphQLField" = SatellitePositionGraphQLField("id")
    name: "SatellitePositionGraphQLField" = SatellitePositionGraphQLField("name")
    latitude: "SatellitePositionGraphQLField" = SatellitePositionGraphQLField(
        "latitude"
    )
    longitude: "SatellitePositionGraphQLField" = SatellitePositionGraphQLField(
        "longitude"
    )
    altitude: "SatellitePositionGraphQLField" = SatellitePositionGraphQLField(
        "altitude"
    )
    timestamp: "SatellitePositionGraphQLField" = SatellitePositionGraphQLField(
        "timestamp"
    )
    uid: "SatellitePositionGraphQLField" = SatellitePositionGraphQLField("uid")

    def fields(
        self, *subfields: SatellitePositionGraphQLField
    ) -> "SatellitePositionFields":
        """Subfields should come from the SatellitePositionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SatellitePositionFields":
        self._alias = alias
        return self


class SatelliteTleFields(GraphQLField):
    id: "SatelliteTleGraphQLField" = SatelliteTleGraphQLField("id")
    name: "SatelliteTleGraphQLField" = SatelliteTleGraphQLField("name")
    tle_line_1: "SatelliteTleGraphQLField" = SatelliteTleGraphQLField("tleLine1")
    tle_line_2: "SatelliteTleGraphQLField" = SatelliteTleGraphQLField("tleLine2")
    uid: "SatelliteTleGraphQLField" = SatelliteTleGraphQLField("uid")

    def fields(self, *subfields: SatelliteTleGraphQLField) -> "SatelliteTleFields":
        """Subfields should come from the SatelliteTleFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SatelliteTleFields":
        self._alias = alias
        return self


class SatelliteVisibilityFields(GraphQLField):
    satellite_id: "SatelliteVisibilityGraphQLField" = SatelliteVisibilityGraphQLField(
        "satelliteId"
    )
    satellite_name: "SatelliteVisibilityGraphQLField" = SatelliteVisibilityGraphQLField(
        "satelliteName"
    )
    aos: "SatelliteVisibilityGraphQLField" = SatelliteVisibilityGraphQLField("aos")
    los: "SatelliteVisibilityGraphQLField" = SatelliteVisibilityGraphQLField("los")

    @classmethod
    def user_location(cls) -> "UserLocationFields":
        return UserLocationFields("user_location")

    uid: "SatelliteVisibilityGraphQLField" = SatelliteVisibilityGraphQLField("uid")

    def fields(
        self, *subfields: Union[SatelliteVisibilityGraphQLField, "UserLocationFields"]
    ) -> "SatelliteVisibilityFields":
        """Subfields should come from the SatelliteVisibilityFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SatelliteVisibilityFields":
        self._alias = alias
        return self


class UserLocationFields(GraphQLField):
    uid: "UserLocationGraphQLField" = UserLocationGraphQLField("uid")
    latitude: "UserLocationGraphQLField" = UserLocationGraphQLField("latitude")
    longitude: "UserLocationGraphQLField" = UserLocationGraphQLField("longitude")
    radius: "UserLocationGraphQLField" = UserLocationGraphQLField("radius")
    horizon: "UserLocationGraphQLField" = UserLocationGraphQLField("horizon")

    def fields(self, *subfields: UserLocationGraphQLField) -> "UserLocationFields":
        """Subfields should come from the UserLocationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserLocationFields":
        self._alias = alias
        return self

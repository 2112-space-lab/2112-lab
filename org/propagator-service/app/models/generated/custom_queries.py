# Generated by ariadne-codegen

from typing import Any, Dict, Optional

from .custom_fields import (
    HealthStatusFields,
    SatellitePositionFields,
    SatelliteTleFields,
    SatelliteVisibilityFields,
)
from .custom_typing_fields import GraphQLField
from .input_types import UserLocationInput


class Query:
    @classmethod
    def satellite_position(cls, id: str) -> SatellitePositionFields:
        arguments: Dict[str, Dict[str, Any]] = {"id": {"type": "ID!", "value": id}}
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SatellitePositionFields(
            field_name="satellitePosition", arguments=cleared_arguments
        )

    @classmethod
    def satellite_tle(cls, id: str) -> SatelliteTleFields:
        arguments: Dict[str, Dict[str, Any]] = {"id": {"type": "ID!", "value": id}}
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SatelliteTleFields(
            field_name="satelliteTle", arguments=cleared_arguments
        )

    @classmethod
    def satellite_positions_in_range(
        cls, id: str, start_time: str, end_time: str
    ) -> SatellitePositionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "id": {"type": "ID!", "value": id},
            "startTime": {"type": "String!", "value": start_time},
            "endTime": {"type": "String!", "value": end_time},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SatellitePositionFields(
            field_name="satellitePositionsInRange", arguments=cleared_arguments
        )

    @classmethod
    def cached_satellite_visibilities(
        cls, uid: str, user_location: UserLocationInput, start_time: str, end_time: str
    ) -> SatelliteVisibilityFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "uid": {"type": "String!", "value": uid},
            "userLocation": {"type": "UserLocationInput!", "value": user_location},
            "startTime": {"type": "String!", "value": start_time},
            "endTime": {"type": "String!", "value": end_time},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SatelliteVisibilityFields(
            field_name="cachedSatelliteVisibilities", arguments=cleared_arguments
        )

    @classmethod
    def ping(cls) -> GraphQLField:
        return GraphQLField(field_name="ping")

    @classmethod
    def ready(cls) -> HealthStatusFields:
        return HealthStatusFields(field_name="ready")
